version: '3.5'

x-EVENTSTORE_CONNECTION: 
    &EVENTSTORE_CONNECTION
    EVENTSTORE_CONNECTION=tcp://admin:changeit@eventstore:1113

x-EVENTSTORE_FLIGHT_STREAM_NAME:
    &EVENTSTORE_FLIGHT_STREAM_NAME
    EVENTSTORE_FLIGHT_STREAM_NAME=event_flights

x-EVENTSTORE_PASSENGER_STREAM_NAME:
    &EVENTSTORE_PASSENGER_STREAM_NAME
    EVENTSTORE_PASSENGER_STREAM_NAME=event_passengers

x-POSTGRES_FLIGHT_DB_CONNECTION:
    &POSTGRES_FLIGHT_DB_CONNECTION
    POSTGRE_CONNECTION=Server=db-flights;Port=5432;Database=Flights;User Id=flights_user;Password=flights_user_pass;

x-POSTGRES_PASSENGERS_DB_CONNECTION:
    &POSTGRES_PASSENGERS_DB_CONNECTION
    POSTGRE_CONNECTION=Server=db-passengers;Port=5432;Database=Passengers;User Id=passengers_user;Password=passengers_user_pass;

services:
    api-gateway:
       restart: always
       container_name: ${DOCKER_REGISTRY-}api-gateway
       ports:
           - "5000:80"
       build:
           context: .
           dockerfile: ./api-gateway/Dockerfile
       networks: 
           - microservice

    flights-api:
        restart: always
        container_name: ${DOCKER_REGISTRY-}flights-api
        build:
            context: .
            dockerfile: ./Flights/Flights.API/Dockerfile
        networks:
            - microservice
        environment:
            - ASPNETCORE_URLS=http://+:8040
            - *EVENTSTORE_FLIGHT_STREAM_NAME
            - *EVENTSTORE_CONNECTION
            - *POSTGRES_FLIGHT_DB_CONNECTION
            - RPC_SERVER_PORT=8041
        depends_on: 
            - eventstore
            - db-flights

    flights-processor:
        restart: always
        container_name: ${DOCKER_REGISTRY-}flights-processor
        networks: 
            - microservice
        build:
            context: .
            dockerfile: ./Flights/Flights.Processor/Dockerfile
        environment: 
            - EVENTSTORE_SUBSCRIPTION_GROUP_NAME=subscribe_flights
            - *EVENTSTORE_FLIGHT_STREAM_NAME
            - *EVENTSTORE_CONNECTION
            - *POSTGRES_FLIGHT_DB_CONNECTION
        depends_on: 
            - eventstore
            - db-flights

    passengers-api:
        restart: always
        container_name: ${DOCKER_REGISTRY-}passengers-api
        build:
            context: .
            dockerfile: ./Passengers/Passengers.API/Dockerfile
        networks:
            - microservice
        environment:
            - ASPNETCORE_URLS=http://+:8050
            - *EVENTSTORE_PASSENGER_STREAM_NAME
            - *EVENTSTORE_CONNECTION
            - *POSTGRES_PASSENGERS_DB_CONNECTION
            - FLIGHT_RPC_HOSTNAME=flights-api
            - FLIGHT_RPC_PORT=8041
        depends_on: 
            - eventstore
            - db-passengers

    passengers-processor:
        restart: always
        container_name: ${DOCKER_REGISTRY-}passengers-processor
        networks: 
            - microservice
        build:
            context: .
            dockerfile: ./Passengers/Passengers.Processor/Dockerfile
        environment: 
            - EVENTSTORE_SUBSCRIPTION_GROUP_NAME=subscribe_passengers
            - *EVENTSTORE_PASSENGER_STREAM_NAME
            - *EVENTSTORE_CONNECTION
            - *POSTGRES_PASSENGERS_DB_CONNECTION
        depends_on: 
            - eventstore
            - db-passengers

    auditlog-api:
        restart: always
        container_name: ${DOCKER_REGISTRY-}auditlog-api
        build:
            context: .
            dockerfile: ./AuditLog.API/Dockerfile
        networks:
            - microservice
        environment:
            - ASPNETCORE_URLS=http://+:8080
            - *EVENTSTORE_FLIGHT_STREAM_NAME
            - *EVENTSTORE_PASSENGER_STREAM_NAME
            - *EVENTSTORE_CONNECTION
        depends_on: 
            - eventstore
    
    eventstore:
        image: eventstore/eventstore:5.0.8-xenial
        restart: always
        networks: 
            - microservice
        environment:
            - EVENTSTORE_CLUSTER_SIZE=1
            - EVENTSTORE_INT_TCP_PORT=1112
            - EVENTSTORE_EXT_TCP_PORT=1113
            - EVENTSTORE_INT_HTTP_PORT=2112
            - EVENTSTORE_EXT_HTTP_PORT=2113
            - EVENTSTORE_DB=/var/lib/eventstore-data
            - EVENTSTORE_INDEX=/var/lib/eventstore-index
            - EVENTSTORE_LOG=/var/log/eventstore
        volumes:
            - "${HOME}/${DOCKER_REGISTRY}/eventstore/data:/var/lib/eventstore-data"
            - "${HOME}/${DOCKER_REGISTRY}/eventstore/index:/var/lib/eventstore-index"
            - "${HOME}/${DOCKER_REGISTRY}/eventstore/logs:/var/log/eventstore"
        ports:
            - "1112:1112"
            - "1113:1113"
            - "2112:2112"
            - "2113:2113"
    
    db-flights:
        image: postgres:13-alpine
        restart: always
        networks: 
            - microservice
        environment: 
            - POSTGRES_USER=flights_user
            - POSTGRES_PASSWORD=flights_user_pass
            - POSTGRES_DB=Flights
        volumes:
            - "${HOME}/${DOCKER_REGISTRY}/postgres/flights:/var/lib/postgresql/data"
            - ./DbScript/flights_init.sql:/docker-entrypoint-initdb.d/init.sql
        command: -p 5432
    
    db-passengers:
        image: postgres:13-alpine
        restart: always
        networks: 
            - microservice
        environment: 
            - POSTGRES_USER=passengers_user
            - POSTGRES_PASSWORD=passengers_user_pass
            - POSTGRES_DB=Passengers
        volumes:
            - "${HOME}/${DOCKER_REGISTRY}/postgres/passengers:/var/lib/postgresql/data"
            - ./DbScript/passengers_init.sql:/docker-entrypoint-initdb.d/init.sql
        command: -p 5432
    

networks:
    microservice:
        driver: bridge